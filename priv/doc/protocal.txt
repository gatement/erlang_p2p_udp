1. Diagram

                   server
                    / \
                   /   \
                  /     \
                 /       \
                /         \ 
              udp         udp
              /             \
             /               \
            /                 \
           /                   \
          /                     \
       peer1 <------udp------> peer2


2. Protocal
   *. online req (peer -> server) : 0x01(prefix), len(1B), LocalIp(4B), LocalPort(2B), ClientId
   *. online res (server -> peer) : 0x01(prefix), len(1B), 0x00(success) | 0x01(fail)

   *. connect req (peer -> server): 0x02(prefix), len(1B), PeerId
   *. connect res (server -> peer): 
                           success: 0x02(prefix), len(1B), 0x00(result), PeerLocalIp(4B), PeerLocalPort(2B), PeerPublicIp(4B), PeerPublicPort(2B), PeerId
                           fail   : 0x02(prefix), len(1B), 0x01(result)

   *. open hole (peer -> peer)    : 0x03(prefix), len(1B), 0x00 
   *. send msg (peer1 <-> peer2)  : 0x04(prefix), 1B(left len), Data


3. Compile
   run "./rebar co"


4. Usage
   1) open server via run "./ser" (configure file is "./local_ser.config")
   2) on peer1 machine, run "./cli" (configure file is "./local_cli.config")
      then "p2p_client:online("Peer1Name")."
   3) on peer2 machine, run "./cli"
      then "p2p_client:online("Peer2Name")."
      then "p2p_client:connect_to_peer("Peer1Name")."
   4) happy to send msg via the p2p channel
      "p2p_client:send_msg("Msg")."

